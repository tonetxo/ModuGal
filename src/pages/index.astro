---
import Layout from '../layouts/Layout.astro';
const images = [
  {
    src: "/assets/hero-image-1.png",
    alt: "Captura de pantalla del sintetizador ModuGal - Vista principal",
  },
  {
    src: "/assets/hero-image-2.png",
    alt: "Captura de pantalla del sintetizador ModuGal - Detalle del oscilador",
  },
  {
    src: "/assets/hero-image-3.png",
    alt: "Captura de pantalla del sintetizador ModuGal - Matriz de modulación",
  },
];
---

<Layout title="ModuGal - El Taller del Inventor Sónico">
	<main>
		<div class="container">
			<header>
				<h1>ModuGal</h1>
				<h2>Sintetizador Modular Virtual</h2>
			</header>

			<div class="slideshow-container">
        {images.map((image, index) => (
          <img 
            src={image.src} 
            alt={image.alt} 
            class={`slideshow-image ${index === 0 ? 'visible' : ''}`} 
          />
        ))}
			</div>

			<div class="content">
				<p class="tagline">
					El taller del inventor sónico. Esculpe tus paisajes sonoros con una precisión de otra era.
				</p>
				<div class="cta-buttons">
					<a href="#" class="button primary">Comprar Versión Completa</a>
					<a href="#" class="button secondary">Descargar Demo</a>
				</div>
			</div>
		</div>
	</main>
</Layout>

<style>
	.container {
		max-width: 800px;
		width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
	}

	header {
		margin-bottom: 2rem;
	}

	h1 {
		font-size: 4rem;
		line-height: 1;
		margin-bottom: 0.5rem;
	}

	h2 {
		font-size: 1.5rem;
		font-family: var(--font-family-body);
		color: var(--color-text);
		font-weight: 400;
	}

  .slideshow-container {
    display: grid;
    width: 100%;
    max-width: 650px;
    margin: auto;
    border: 3px solid var(--color-accent-1);
		border-radius: 4px;
		box-shadow: 0 0 20px rgba(0,0,0,0.5);
    overflow: hidden;
    cursor: grab;
  }

  .slideshow-container.grabbing {
    cursor: grabbing;
  }

  .slideshow-image {
    grid-area: 1 / 1 / 2 / 2;
    width: 100%;
    height: 100%;
    object-fit: contain;
    opacity: 0;
    transition: opacity 0.75s ease-in-out;
    visibility: hidden;
    transform-origin: center center;
  }

  .slideshow-image.visible {
    opacity: 1;
    visibility: visible;
  }

	.content {
		margin-top: 2rem;
	}

	.tagline {
		font-size: 1.2rem;
		margin-bottom: 2rem;
		color: var(--color-text);
	}

	.cta-buttons {
		display: flex;
		justify-content: center;
		gap: 1rem;
	}

	.button {
		display: inline-block;
		padding: 0.8rem 1.5rem;
		border-radius: 4px;
		text-decoration: none;
		font-weight: 600;
		font-family: var(--font-family-body);
		transition: all 0.3s ease;
		border: 2px solid transparent;
	}

	.button.primary {
		background-color: var(--color-accent-1);
		color: var(--color-base);
		border-color: var(--color-accent-1);
	}

	.button.primary:hover {
		background-color: transparent;
		color: var(--color-accent-1);
	}

	.button.secondary {
		background-color: transparent;
		color: var(--color-accent-2);
		border-color: var(--color-accent-2);
	}

	.button.secondary:hover {
		background-color: var(--color-accent-2);
		color: var(--color-base);
	}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.slideshow-container');
    const images = document.querySelectorAll('.slideshow-image');
    let currentIndex = 0;
    let slideshowInterval;

    // --- State for Zoom & Pan ---
    let scale = 1;
    let panning = false;
    let start = { x: 0, y: 0 };
    let transform = { x: 0, y: 0 };

    if (images.length < 1) return;

    function applyTransform(element) {
      element.style.transform = `translate(${transform.x}px, ${transform.y}px) scale(${scale})`;
    }

    function resetZoomPanState() {
      scale = 1;
      panning = false;
      start = { x: 0, y: 0 };
      transform = { x: 0, y: 0 };
    }

    container.addEventListener('mousedown', (e) => {
      e.preventDefault();
      panning = true;
      start = { x: e.clientX - transform.x, y: e.clientY - transform.y };
      container.classList.add('grabbing');
    });

    container.addEventListener('mouseup', () => {
      panning = false;
      container.classList.remove('grabbing');
    });

    container.addEventListener('mouseleave', () => {
      panning = false;
      container.classList.remove('grabbing');
    });

    container.addEventListener('mousemove', (e) => {
      e.preventDefault();
      if (!panning) return;
      if (scale === 1) return; // No panning if not zoomed

      transform.x = e.clientX - start.x;
      transform.y = e.clientY - start.y;
      
      applyTransform(images[currentIndex]);
    });

    container.addEventListener('wheel', (e) => {
      e.preventDefault();
      const delta = e.deltaY > 0 ? -0.1 : 0.1;
      const newScale = scale + delta;
      
      scale = Math.max(1, Math.min(newScale, 5)); // Clamp scale between 1 and 5

      if (scale === 1) {
        // Reset position when zoomed all the way out
        transform = { x: 0, y: 0 };
      }

      applyTransform(images[currentIndex]);
    });

    // --- Slideshow Logic ---
    function advanceSlide() {
      // Reset current image's transform before switching
      images[currentIndex].style.transform = 'translate(0px, 0px) scale(1)';
      images[currentIndex].classList.remove('visible');
      
      resetZoomPanState();
      
      currentIndex = (currentIndex + 1) % images.length;
      
      images[currentIndex].classList.add('visible');
      applyTransform(images[currentIndex]);
    }

    function startSlideshow() {
      stopSlideshow(); // Prevent multiple intervals
      slideshowInterval = setInterval(advanceSlide, 3000);
    }

    function stopSlideshow() {
      clearInterval(slideshowInterval);
    }

    container.addEventListener('mouseenter', stopSlideshow);
    container.addEventListener('mouseleave', () => {
      // Advance slide immediately and then restart the interval
      advanceSlide();
      startSlideshow();
    });

    // Initial setup
    images.forEach((img, index) => {
      img.classList.toggle('visible', index === 0);
    });
    startSlideshow();
  });
</script>