---
import Layout from '../layouts/Layout.astro';
const images = [
  { src: "/assets/hero-image-1.png", alt: "Captura de pantalla del sintetizador ModuGal - Vista principal" },
  { src: "/assets/hero-image-2.png", alt: "Captura de pantalla del sintetizador ModuGal - Detalle del oscilador" },
  { src: "/assets/hero-image-3.png", alt: "Captura de pantalla del sintetizador ModuGal - Matriz de modulación" },
];
---

<Layout title="ModuGal - El Taller del Inventor Sónico">
	<div class="main-grid">
    <svg id="sine-wave-svg" class="background-wave">
      <path id="sine-wave-path-1"></path>
      <path id="sine-wave-path-2"></path>
    </svg>

    <div class="knob-area">
      <h4 class="knob-label">Menú</h4>
      <div id="nav-knob" class="knob">
        <div class="knob-base"></div>
        <div class="knob-ring"><div class="knob-indicator"></div></div>
        <div class="knob-center"></div>
      </div>
    </div>

    <main>
      <div class="container">
        <header>
          <h1>ModuGal</h1>
          <h2>Sintetizador Modular Virtual</h2>
        </header>
        <div class="slideshow-container">
          {images.map((image, index) => (
            <img src={image.src} alt={image.alt} class={`slideshow-image ${index === 0 ? 'visible' : ''}`} />
          ))}
        </div>
        <div class="content">
          <p class="tagline">El taller del inventor sónico. Esculpe tus paisajes sonoros con una precisión de otra era.</p>
          <div class="cta-buttons">
            <a href="#" class="button primary">Comprar Versión Completa</a>
            <a href="#" class="button secondary">Descargar Demo</a>
          </div>
        </div>
      </div>
    </main>

    <div class="menu-title-area">
      <h3 id="menu-title-display"></h3>
    </div>
  </div>
</Layout>

<style>
  .main-grid { display: grid; grid-template-columns: 1fr 2fr 1fr; align-items: center; justify-items: center; width: 100%; min-height: 100vh; padding: 2rem; box-sizing: border-box; position: relative; }
  .background-wave { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 0; pointer-events: none; }
  #sine-wave-path-1, #sine-wave-path-2 { fill: none; stroke: var(--color-accent-1); stroke-width: 2; stroke-opacity: 0.6; filter: drop-shadow(0 0 5px var(--color-accent-1)); }
  .knob-area, main, .menu-title-area { position: relative; z-index: 1; }
  .knob-area { display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 1.5rem; width: 100%; height: 100%; }
  .menu-title-area { display: flex; justify-content: center; align-items: center; width: 100%; height: 100%; }
  main { width: 100%; max-width: 700px; }
	.container { width: 100%; display: flex; flex-direction: column; align-items: center; text-align: center; }
	header { margin-bottom: 2rem; }
	h1 { font-size: 4rem; line-height: 1; margin-bottom: 0.5rem; }
	h2 { font-size: 1.5rem; font-family: var(--font-family-body); color: var(--color-text); font-weight: 400; }
  .knob-label { font-family: var(--font-family-headings); color: var(--color-accent-1); font-size: 1.8rem; margin: 0; text-shadow: 0 0 5px var(--color-accent-1); }
  .knob { position: relative; width: 150px; height: 150px; cursor: ns-resize; display: flex; justify-content: center; align-items: center; }
  .knob-base { position: absolute; width: 100%; height: 100%; border-radius: 50%; background-image: radial-gradient(circle at 50% 50%, #8c5a2d 0%, #593a1c 100%); box-shadow: inset 0 0 20px rgba(0,0,0,0.7), 0 5px 15px rgba(0,0,0,0.5); }
  .knob-ring { position: absolute; width: 80%; height: 80%; border-radius: 50%; background-image: radial-gradient(circle at 50% 50%, #3d3d3d 0%, #1a1a1a 100%); box-shadow: inset 0 0 10px rgba(0,0,0,0.8), 0 2px 5px rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; transition: transform 0.1s linear; }
  .knob-center { position: absolute; width: 40%; height: 40%; border-radius: 50%; background-image: radial-gradient(circle at 30% 30%, #e0e0e0 0%, #8c8c8c 100%); box-shadow: inset 0 0 5px rgba(255,255,255,0.5), 0 0 10px rgba(0,0,0,0.5); }
  .knob-indicator { position: absolute; width: 4px; height: 15px; background-color: var(--color-accent-2); top: 0; transform: translateY(-5px); border-radius: 2px; box-shadow: 0 0 5px var(--color-accent-2); }
  .menu-title-area h3 { font-size: 2.5rem; color: var(--color-accent-1); text-shadow: 0 0 10px var(--color-accent-1); writing-mode: vertical-rl; transform: rotate(180deg); opacity: 0; transition: opacity 0.3s ease-in-out; }
  .menu-title-area h3.visible { opacity: 1; }
  .slideshow-container { display: grid; width: 100%; margin: auto; border: 3px solid var(--color-accent-1); border-radius: 4px; box-shadow: 0 0 20px rgba(0,0,0,0.5); overflow: hidden; cursor: grab; }
  .slideshow-container.grabbing { cursor: grabbing; }
  .slideshow-image { grid-area: 1 / 1 / 2 / 2; width: 100%; height: 100%; object-fit: contain; opacity: 0; transition: opacity 0.75s ease-in-out; visibility: hidden; transform-origin: center center; }
  .slideshow-image.visible { opacity: 1; visibility: visible; }
	.content { margin-top: 2rem; }
	.tagline { font-size: 1.2rem; margin-bottom: 2rem; color: var(--color-text); }
	.cta-buttons { display: flex; justify-content: center; gap: 1rem; }
	.button { display: inline-block; padding: 0.8rem 1.5rem; border-radius: 4px; text-decoration: none; font-weight: 600; font-family: var(--font-family-body); transition: all 0.3s ease; border: 2px solid transparent; }
	.button.primary { background-color: var(--color-accent-1); color: var(--color-base); border-color: var(--color-accent-1); }
	.button.primary:hover { background-color: transparent; color: var(--color-accent-1); }
	.button.secondary { background-color: transparent; color: var(--color-accent-2); border-color: var(--color-accent-2); }
	.button.secondary:hover { background-color: var(--color-accent-2); color: var(--color-base); }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Global Elements & State ---
    const svg = document.getElementById('sine-wave-svg');
    const sinePath1 = document.getElementById('sine-wave-path-1');
    const sinePath2 = document.getElementById('sine-wave-path-2');
    let audioContext; try { audioContext = new (window.AudioContext || window.webkitAudioContext)(); } catch (e) { console.error('Web Audio API is not supported'); }

    // --- Sine Wave Logic ---
    function updateSineWaves(knobAngle) {
      if (!sinePath1 || !sinePath2 || !svg) return;
      const svgWidth = svg.clientWidth;
      const svgHeight = svg.clientHeight;
      const waveLength = (svgWidth * 0.35) * (knobAngle / 270); // Adjusted max length
      const amplitude = 30;
      const frequency = 0.05;
      const startX1 = svgWidth * 0.18; // Start closer to the edge
      const startX2 = svgWidth * 0.82; // Start closer to the edge
      const yOffset = svgHeight / 2 + 100;

      if (knobAngle === 0) {
        sinePath1.setAttribute('d', '');
        sinePath2.setAttribute('d', '');
        return;
      }

      let pathData1 = `M ${startX1} ${yOffset}`;
      let pathData2 = `M ${startX2} ${yOffset}`;
      for (let x = 0; x <= waveLength; x++) {
        const y = yOffset + Math.sin(x * frequency) * amplitude;
        pathData1 += ` L ${startX1 + x} ${y}`;
        pathData2 += ` L ${startX2 - x} ${y}`;
      }
      sinePath1.setAttribute('d', pathData1);
      sinePath2.setAttribute('d', pathData2);
    }

    // --- Audio Logic ---
    function playMenuBlip(freq = 440) { if (!audioContext) return; const osc = audioContext.createOscillator(); const gain = audioContext.createGain(); osc.connect(gain); gain.connect(audioContext.destination); osc.type = 'sine'; osc.frequency.setValueAtTime(freq, audioContext.currentTime); gain.gain.setValueAtTime(0.2, audioContext.currentTime); gain.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.2); osc.start(audioContext.currentTime); osc.stop(audioContext.currentTime + 0.2); }

    // --- Knob Logic ---
    const knob = document.getElementById('nav-knob');
    if (knob) {
      const knobRing = knob.querySelector('.knob-ring');
      const menuTitleDisplay = document.getElementById('menu-title-display');
      const menuItems = [{ name: 'Inicio', path: '/', freq: 261.63 }, { name: 'Módulos', path: '/modulos', freq: 329.63 }, { name: 'Demos', path: '/demos', freq: 392.00 }, { name: 'Soporte', path: '/soporte', freq: 440.00 }];
      let isDraggingKnob = false, currentAngle = 0, startY = 0, lastAngle = 0, selectedIndex = 0;

      function updateMenu() {
        const totalItems = menuItems.length;
        const anglePerItem = 270 / (totalItems - 1);
        const newIndex = Math.round(currentAngle / anglePerItem);
        if (newIndex !== selectedIndex) { playMenuBlip(menuItems[newIndex].freq); }
        selectedIndex = newIndex;
        selectedIndex = Math.max(0, Math.min(totalItems - 1, selectedIndex));
        menuTitleDisplay.textContent = menuItems[selectedIndex].name;
        menuTitleDisplay.classList.toggle('visible', menuItems[selectedIndex].name !== 'Inicio');
      }

      knob.addEventListener('mousedown', (e) => { e.preventDefault(); isDraggingKnob = true; startY = e.clientY; lastAngle = currentAngle; knobRing.style.transition = 'none'; });
      window.addEventListener('mousemove', (e) => {
        if (!isDraggingKnob) return;
        const deltaY = e.clientY - startY;
        currentAngle = Math.max(0, Math.min(270, lastAngle - deltaY * 1.5));
        knobRing.style.transform = `rotate(${currentAngle}deg)`;
        updateMenu();
        updateSineWaves(currentAngle);
      });
      window.addEventListener('mouseup', () => { if (!isDraggingKnob) return; isDraggingKnob = false; knobRing.style.transition = 'transform 0.1s linear'; });
      knob.addEventListener('click', (e) => { if (Math.abs(lastAngle - currentAngle) > 5) return; window.location.href = menuItems[selectedIndex].path; });
      updateMenu();
      updateSineWaves(currentAngle);
    }

    // --- Slideshow Logic ---
    const slideshowContainer = document.querySelector('.slideshow-container');
    if (slideshowContainer) {
      const images = slideshowContainer.querySelectorAll('.slideshow-image');
      let currentIndex = 0, slideshowInterval, scale = 1, panning = false, start = { x: 0, y: 0 }, transform = { x: 0, y: 0 };
      if (images.length > 0) {
          function applyTransform(element) { if (!element) return; element.style.transform = `translate(${transform.x}px, ${transform.y}px) scale(${scale})`; }
          function resetZoomPanState() { scale = 1; panning = false; start = { x: 0, y: 0 }; transform = { x: 0, y: 0 }; }
          slideshowContainer.addEventListener('mousedown', (e) => { e.preventDefault(); panning = true; start = { x: e.clientX - transform.x, y: e.clientY - transform.y }; slideshowContainer.classList.add('grabbing'); });
          slideshowContainer.addEventListener('mouseup', () => { panning = false; slideshowContainer.classList.remove('grabbing'); });
          slideshowContainer.addEventListener('mousemove', (e) => { e.preventDefault(); if (!panning || scale === 1) return; transform.x = e.clientX - start.x; transform.y = e.clientY - start.y; applyTransform(images[currentIndex]); });
          slideshowContainer.addEventListener('wheel', (e) => { e.preventDefault(); const delta = e.deltaY > 0 ? -0.1 : 0.1; scale = Math.max(1, Math.min(scale + delta, 5)); if (scale === 1) { transform = { x: 0, y: 0 }; } applyTransform(images[currentIndex]); });
          function advanceSlide() { if(images[currentIndex]) { images[currentIndex].style.transform = 'translate(0px, 0px) scale(1)'; images[currentIndex].classList.remove('visible'); } resetZoomPanState(); currentIndex = (currentIndex + 1) % images.length; if(images[currentIndex]) { images[currentIndex].classList.add('visible'); applyTransform(images[currentIndex]); } }
          function startSlideshow() { stopSlideshow(); slideshowInterval = setInterval(advanceSlide, 3000); }
          function stopSlideshow() { clearInterval(slideshowInterval); }
          slideshowContainer.addEventListener('mouseenter', stopSlideshow);
          slideshowContainer.addEventListener('mouseleave', () => { panning = false; slideshowContainer.classList.remove('grabbing'); advanceSlide(); startSlideshow(); });
          images.forEach((img, index) => { img.classList.toggle('visible', index === 0); });
          startSlideshow();
      }
    }
  });
</script>