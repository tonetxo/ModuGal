---
import { languages, defaultLang } from "../i18n/ui";

const { pathname } = Astro.url;

// Remove language prefix from the path
const pathParts = pathname.split("/").filter((p) => p);
const langKeys = Object.keys(languages);
if (pathParts.length > 0 && langKeys.includes(pathParts[0])) {
  pathParts.shift();
}
const pathWithoutLang = pathParts.join("/");

const currentLang = pathname.split("/")[1] || defaultLang;
---

<div class="lang-switcher">
  {Object.entries(languages).map(([lang, label]) => {
    const newPath = lang === defaultLang
        ? `/${pathWithoutLang}`
        : `/${lang}/${pathWithoutLang}`;
    return (
      <a
        href={newPath}
        class:list={[
          "lang-button",
          { active: lang === currentLang },
        ]}
        data-lang={lang}
      >
        {label}
      </a>
    );
  })}
</div>

<style>
  .lang-switcher {
    position: fixed; /* Stay on screen */
    top: 1rem;
    right: 1rem;
    z-index: 100;
    display: flex;
    gap: 0.5rem;
  }
  .lang-button {
    background-color: transparent;
    border: 1px solid var(--color-accent-2);
    color: var(--color-accent-2);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    cursor: pointer;
    font-family: var(--font-family-body);
    opacity: 0.7;
    transition: all 0.2s ease;
  }
  .lang-button:hover {
    opacity: 1;
    background-color: var(--color-accent-2);
    color: var(--color-base);
  }
  .lang-button.active {
    opacity: 1;
    background-color: var(--color-accent-1);
    border-color: var(--color-accent-1);
    color: var(--color-base);
  }
</style>

<script>
  import { defaultLang, languages } from '../i18n/ui';

  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('.lang-button')) {
      const newLang = target.getAttribute('data-lang');
      const pathParts = window.location.pathname.split('/').filter(p => p);

      // Remove any existing language prefix
      const langKeys = Object.keys(languages);
      if (pathParts.length > 0 && langKeys.includes(pathParts[0])) {
          pathParts.shift();
      }

      let newPath = pathParts.join('/');

      if (newLang !== defaultLang) {
        newPath = `/${newLang}/${newPath}`;
      } else {
        // For default lang, we want to be at the root of the language dir
        newPath = `/${defaultLang}/${newPath}`;
      }

      // Handle root path
      if (newPath === `/${defaultLang}/` || newPath === '//') newPath = `/${defaultLang}`;
      if (newPath.endsWith('/') && newPath.length > 1) newPath = newPath.slice(0, -1);

      window.location.pathname = newPath;
    }
  });

  // Set active button on page load
  const pathLang = window.location.pathname.split('/')[1];
  const langButtons = document.querySelectorAll('.lang-button');
  const currentLang = (Object.keys(languages).includes(pathLang)) ? pathLang : defaultLang;

  langButtons.forEach(button => {
      const buttonLang = button.getAttribute('data-lang');
      if (buttonLang === currentLang) {
          button.classList.add('active');
      }
  });
</script>