---
import LanguageSwitcher from '../components/LanguageSwitcher.astro';

interface Props {
	title: string;
}

const { title } = Astro.props;
---
<!doctype html>
<html lang="gl">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="O obradoiro do inventor sÃ³nico." data-i18n-key="page.description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title data-i18n-key="page.title">{title}</title>

		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Source+Sans+Pro:wght@400;600&display=swap" rel="stylesheet">
	</head>
	<body>
    <div class="sound-controls">
      <button id="mute-button" title="Silenciar / Activar Sonido">
        <svg id="icon-unmuted" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"></path></svg>
        <svg id="icon-muted" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"></path></svg>
      </button>
    </div>
    <LanguageSwitcher />
		<slot />
	</body>
</html>

<style is:global>
  @font-face { font-family: 'Castelao'; src: url('/fonts/Castelao.woff2') format('woff2'); font-weight: normal; font-style: normal; font-display: swap; }
	:root { --color-base: #2a2a2a; --color-text: #e0e0e0; --color-accent-1: #b87333; --color-accent-2: #e1c16e; --font-family-headings: 'Playfair Display', serif; --font-family-body: 'Source Sans Pro', sans-serif; }
	html { font-family: var(--font-family-body); background-color: var(--color-base); color: var(--color-text); }
	body { margin: 0; box-sizing: border-box; min-height: 100vh; display: flex; align-items: center; justify-content: center; }
	h1, h2, h3, h4 { font-family: var(--font-family-headings); color: var(--color-accent-2); margin: 0; }
  .sound-controls {
    position: fixed;
    top: 1rem;
    left: 1rem;
    z-index: 100;
  }
  #mute-button {
    background: transparent;
    border: 1px solid var(--color-accent-2);
    color: var(--color-accent-2);
    cursor: pointer;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0.7;
    transition: all 0.2s ease;
  }
  #mute-button:hover {
    opacity: 1;
    background-color: var(--color-accent-2);
    color: var(--color-base);
  }
  #mute-button svg {
    width: 24px;
    height: 24px;
    pointer-events: none; /* Prevent SVG from capturing clicks */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // 1. Create and expose global AudioContext
    let audioContext;
    try {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      window.audioContext = audioContext;
    } catch (e) {
      console.error('Web Audio API is not supported');
      const muteButton = document.getElementById('mute-button');
      if(muteButton) muteButton.style.display = 'none';
      return;
    }

    // 2. Get elements
    const muteButton = document.getElementById('mute-button');
    const iconUnmuted = document.getElementById('icon-unmuted');
    const iconMuted = document.getElementById('icon-muted');
    if (!muteButton || !iconUnmuted || !iconMuted) return;

    // 3. Prepare audio nodes and state
    const masterGain = audioContext.createGain();
    masterGain.gain.value = 0; // Start fully muted
    masterGain.connect(audioContext.destination);
    
    const loopSource = audioContext.createBufferSource();
    let isReadyToPlay = false;
    let hasStarted = false;
    let isMuted = true;

    // 4. Get initial state from localStorage
    const savedMuteState = localStorage.getItem('isMuted');
    isMuted = savedMuteState === null ? true : JSON.parse(savedMuteState);

    // 5. Load audio data in the background
    fetch('/audio/loop_1.mp3')
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.arrayBuffer();
      })
      .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
      .then(audioBuffer => {
        loopSource.buffer = audioBuffer;
        loopSource.loop = true;
        loopSource.connect(masterGain);
        isReadyToPlay = true;
      })
      .catch(e => {
        console.error(`Error loading audio file: ${e}`);
        muteButton.style.display = 'none';
      });

    // 6. Click handler
    function toggleMute(shouldBeMuted) {
        if (!masterGain) return;
        isMuted = shouldBeMuted;
        localStorage.setItem('isMuted', JSON.stringify(isMuted));

        const newGain = isMuted ? 0 : 0.4;
        masterGain.gain.setTargetAtTime(newGain, audioContext.currentTime, 0.4);

        iconUnmuted.style.display = isMuted ? 'none' : 'block';
        iconMuted.style.display = isMuted ? 'block' : 'none';
    }

    muteButton.addEventListener('click', () => {
      if (!isReadyToPlay) return;

      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }

      if (!hasStarted) {
        loopSource.start(0);
        hasStarted = true;
        toggleMute(false); // First click should unmute
      } else {
        toggleMute(!isMuted);
      }
    });

    // Set initial icon state based on localStorage
    iconUnmuted.style.display = isMuted ? 'none' : 'block';
    iconMuted.style.display = isMuted ? 'block' : 'none';
  });
</script>