---
import LanguageSwitcher from "../components/LanguageSwitcher.astro";
import { ViewTransitions } from "astro:transitions";
import { defaultLang } from "../i18n/ui";

interface Props {
  title: string;
}

const { title } = Astro.props;
const currentYear = new Date().getFullYear();
const lang = Astro.url.pathname.split("/")[1] || defaultLang;
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="O obradoiro do inventor sónico."
      data-i18n-key="page.description"
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title data-i18n-key="page.title">{title}</title>
    <ViewTransitions />

    <style>
      /* Evita el parpadeo de contenido no traducido (FOUC) */
      [data-i18n-key] {
        visibility: hidden;
      }
    </style>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Source+Sans+Pro:wght@400;600&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="sound-controls">
      <a href="/" id="home-button" class="nav-button" title="Inicio">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          ><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path></svg
        >
      </a>
      <button id="back-button" class="nav-button" title="Atrás">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          ><path
            d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
          ></path></svg
        >
      </button>
      <button
        id="mute-button"
        class="nav-button"
        title="Silenciar / Activar Sonido"
      >
        <svg
          id="icon-unmuted"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          ><path
            d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"
          ></path></svg
        >
        <svg
          id="icon-muted"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          style="display: none;"
          ><path
            d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"
          ></path></svg
        >
      </button>
    </div>
    <LanguageSwitcher />
    <slot />
    <footer>
      © {currentYear} Toño Pita | <a href="mailto:tonetxo@gmail.com"
        >tonetxo@gmail.com</a
      > | <span data-i18n-key="footer.rights"
        >Todos os dereitos reservados.</span
      >
    </footer>
  </body>
</html>

<style is:global>
  @font-face {
    font-family: "Castelao";
    src: url("/fonts/Castelao.woff2") format("woff2");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }
  :root {
    --color-base: #2a2a2a;
    --color-text: #e0e0e0;
    --color-accent-1: #b87333;
    --color-accent-2: #e1c16e;
    --font-family-headings: "Playfair Display", serif;
    --font-family-body: "Source Sans Pro", sans-serif;
  }
  html {
    font-family: var(--font-family-body);
    background-color: var(--color-base);
    color: var(--color-text);
  }
  body {
    margin: 0;
    box-sizing: border-box;
    min-height: 100vh;
    /* Las propiedades de centrado global han sido eliminadas para evitar el salto */
  }
  h1,
  h2,
  h3,
  h4 {
    font-family: var(--font-family-headings);
    color: var(--color-accent-2);
    margin: 0;
  }
  .sound-controls {
    position: fixed;
    top: 1rem;
    left: 1rem;
    z-index: 100;
    display: flex;
    gap: 0.5rem;
  }
  .nav-button {
    background: transparent;
    border: 1px solid var(--color-accent-2);
    color: var(--color-accent-2);
    cursor: pointer;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0.7;
    transition: all 0.2s ease;
    padding: 0;
  }
  .nav-button:hover {
    opacity: 1;
    background-color: var(--color-accent-2);
    color: var(--color-base);
  }
  .nav-button svg {
    width: 24px;
    height: 24px;
  }
  footer {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    text-align: center;
    padding: 0.75rem;
    font-size: 0.8rem;
    color: var(--color-text);
    opacity: 0.6;
    z-index: 100;
    pointer-events: none;
  }
  footer a {
    color: var(--color-accent-2);
    text-decoration: none;
    pointer-events: all;
  }
  footer a:hover {
    text-decoration: underline;
  }
</style>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    // Si el manager de audio ya existe, solo necesita reinicializar los botones
    if (window.audioManager && window.audioManager.isInitialized) {
      window.audioManager.attachButtonListener();
      window.audioManager.updateButtonState();
    } else {
      // Si no existe, se crea por primera vez
      window.audioManager = {
        audioContext: null,
        masterGain: null,
        loopSource: null,
        isReadyToPlay: false,
        hasStarted: false,
        isMuted: true,
        isInitialized: false,

        init() {
          try {
            this.audioContext = new (window.AudioContext ||
              window.webkitAudioContext)();
            window.audioContext = this.audioContext; // For other scripts
          } catch (e) {
            console.error("Web Audio API is not supported");
            const muteButton = document.getElementById("mute-button");
            if (muteButton) muteButton.style.display = "none";
            return;
          }

          this.masterGain = this.audioContext.createGain();
          this.masterGain.gain.value = 0;
          this.masterGain.connect(this.audioContext.destination);
          this.loopSource = this.audioContext.createBufferSource();

          const savedMuteState = localStorage.getItem("isMuted");
          this.isMuted =
            savedMuteState === null ? true : JSON.parse(savedMuteState);
          fetch("/audio/loop_1.mp3")
            .then((response) => {
              if (!response.ok)
                throw new Error(`HTTP error! status: ${response.status}`);
              return response.arrayBuffer();
            })
            .then((arrayBuffer) =>
              this.audioContext.decodeAudioData(arrayBuffer)
            )
            .then((audioBuffer) => {
              this.loopSource.buffer = audioBuffer;
              this.loopSource.loop = true;
              this.loopSource.connect(this.masterGain);
              this.isReadyToPlay = true;
            })
            .catch((e) => {
              console.error(`Error loading audio file: ${e}`);
              const muteButton = document.getElementById("mute-button");
              if (muteButton) muteButton.style.display = "none";
            });
          this.isInitialized = true;
          this.attachButtonListener();
          this.updateButtonState();
        },

        toggleMute(shouldBeMuted) {
          if (!this.masterGain) return;
          this.isMuted = shouldBeMuted;
          localStorage.setItem("isMuted", JSON.stringify(this.isMuted));
          const newGain = this.isMuted ? 0 : 0.4;
          this.masterGain.gain.setTargetAtTime(
            newGain,
            this.audioContext.currentTime,
            0.4
          );
          this.updateButtonState();
        },

        updateButtonState() {
          const iconUnmuted = document.getElementById("icon-unmuted");
          const iconMuted = document.getElementById("icon-muted");
          if (!iconUnmuted || !iconMuted) return;
          iconUnmuted.style.display = this.isMuted ? "none" : "block";
          iconMuted.style.display = this.isMuted ? "block" : "none";
        },

        attachButtonListener() {
          const muteButton = document.getElementById("mute-button");
          if (!muteButton) return;
          // Eliminar listener anterior para evitar duplicados
          muteButton.removeEventListener("click", this.handleMuteClick);
          this.handleMuteClick = this.handleMuteClick.bind(this);
          muteButton.addEventListener("click", this.handleMuteClick);
        },

        handleMuteClick() {
          if (!this.isReadyToPlay) return;
          if (this.audioContext.state === "suspended") {
            this.audioContext.resume();
          }
          if (!this.hasStarted) {
            this.loopSource.start(0);
            this.hasStarted = true;
            this.toggleMute(false);
          } else {
            this.toggleMute(!this.isMuted);
          }
        },
      };
      window.audioManager.init();
    }

    // --- Home Button ---
    const homeButton = document.getElementById("home-button");
    if (homeButton) {
      homeButton.addEventListener("click", (event) => {
        if (window.location.pathname === "/") {
          event.preventDefault();
        }
      });
    }

    // --- Back Button ---
    const backButton = document.getElementById("back-button");
    if (backButton) {
      // Para evitar duplicados, es buena práctica remover el listener antes de añadirlo
      const goBack = () => window.history.back();
      backButton.removeEventListener("click", goBack);
      backButton.addEventListener("click", goBack);
    }
  });
</script>
